{
	"Couchbase Go Get": {
		"prefix": "goget",
		"body": [
		  "router.Path(\"/api/${1:Route}/{id}\").Methods(\"GET\").HandlerFunc(${2:RouteMethod})"
		],
		"description": "Couchbase Go Get"
	  },
	  "Couchbase Go Post": {
		"prefix": "gopost",
		"body": [
		  "router.Path(\"/api/${1:Route}\").Methods(\"POST\").HandlerFunc(${2:RouteMethod})"
		],
		"description": "Couchbase Go Post"
	  },
	  "Couchbase Go Add Api": {
		"prefix": "gocbaddapi",
		"body": [
		  "// Add${3/(.*)/${1:/capitalize}/} godoc",
		  "// @Summary Add a ${3/(.*)/${1:/capitalize}/}",
		  "// @Description add by json ${3/(.*)/${1:/downcase}/}",
		  "// @Tags ${3/(.*)/${1:/downcase}/}",
		  "// @Accept  json",
		  "// @Produce  json",
		  "// @Param ${3/(.*)/${1:/downcase}/} body ${3/(.*)/${1:/capitalize}/} true \"Add ${3/(.*)/${1:/capitalize}/}\"",
		  "// @Success 200 {object} ${3/(.*)/${1:/capitalize}/}",
		  "// @Router /api/add${3/(.*)/${1:/downcase}/} [post]",
		  "func Add${3/(.*)/${1:/capitalize}/}(response http.ResponseWriter, request *http.Request) {",
		  "	response.Header().Set(\"content-type\", \"application/json\")",
		  "	var ${3/(.*)/${1:/downcase}/} repository.${3/(.*)/${1:/capitalize}/}",
		  "	_ = json.NewDecoder(request.Body).Decode(&${3/(.*)/${1:/downcase}/})",
		  "	${3/(.*)/${1:/downcase}/}, err := repository.Add${3/(.*)/${1:/capitalize}/}(${3/(.*)/${1:/downcase}/})",
		  "	if err != nil {",
		  "		response.WriteHeader(http.StatusInternalServerError)",
		  "		response.Write([]byte(`{ \"message\": \"` + err.Error() + `\" }`))",
		  "		return",
		  "	}",
		  "	json.NewEncoder(response).Encode(${3/(.*)/${1:/downcase}/})",
		  "}"
		],
		"description": "Couchbase Go Add Api"
	  },
	  "Couchbase Go update Api": {
		"prefix": "gocbupdateapi",
		"body": [
		  "// Update${3/(.*)/${1:/capitalize}/} godoc",
		  "// @Summary update a ${3/(.*)/${1:/capitalize}/}",
		  "// @Description update a ${3/(.*)/${1:/capitalize}/}",
		  "// @Tags ${3/(.*)/${1:/downcase}/}",
		  "// @Accept  json",
		  "// @Produce  json",
		  "// @Param ${3/(.*)/${1:/downcase}/} body ${3/(.*)/${1:/capitalize}/} true \"Update ${3/(.*)/${1:/capitalize}/}\"",
		  "// @Success 200 {object} ${3/(.*)/${1:/capitalize}/}",
		  "// @Router /api/update${3/(.*)/${1:/downcase}/} [post]",
		  "func Update${3/(.*)/${1:/capitalize}/}(response http.ResponseWriter, request *http.Request) {",
		  "	response.Header().Set(\"content-type\", \"application/json\")",
		  "	var ${3/(.*)/${1:/downcase}/} repository.${3/(.*)/${1:/capitalize}/}",
		  "	_ = json.NewDecoder(request.Body).Decode(&${3/(.*)/${1:/downcase}/})",
		  "	${3/(.*)/${1:/downcase}/}, err := repository.Modify${3/(.*)/${1:/capitalize}/}(${3/(.*)/${1:/downcase}/})",
		  "	if err != nil {",
		  "		response.WriteHeader(http.StatusInternalServerError)",
		  "		response.Write([]byte(`{ \"message\": \"` + err.Error() + `\" }`))",
		  "		return",
		  "	}",
		  "	json.NewEncoder(response).Encode(${3/(.*)/${1:/downcase}/})",
		  "}"
		],
		"description": "Couchbase Go update Api"
	  },
	  "Couchbase Go delete Api": {
		"prefix": "gocbdelapi",
		"body": [
		  "// Delete${3/(.*)/${1:/capitalize}/} godoc",
		  "// @Summary delete a ${3/(.*)/${1:/capitalize}/}",
		  "// @Description delete a ${3/(.*)/${1:/capitalize}/}",
		  "// @Tags ${3/(.*)/${1:/downcase}/}",
		  "// @Accept  json",
		  "// @Produce  json",
		  "// @Param id body string true \"Delete ${3/(.*)/${1:/capitalize}/}\"",
		  "// @Success 200 {object} string",
		  "// @Router /api/delete${3/(.*)/${1:/downcase}/} [post]",
		  "func Delete${3/(.*)/${1:/capitalize}/}(response http.ResponseWriter, request *http.Request) {",
		  "	response.Header().Set(\"content-type\", \"application/json\")",
		  "",
		  "	buf := new(bytes.Buffer)",
		  "	buf.ReadFrom(request.Body)",
		  "	id := buf.String()",
		  "",
		  "	err := repository.Remove${3/(.*)/${1:/capitalize}/}(id)",
		  "	if err != nil {",
		  "		response.WriteHeader(http.StatusInternalServerError)",
		  "		response.Write([]byte(`{ \"message\": \"` + err.Error() + `\" }`))",
		  "		return",
		  "	}",
		  "	json.NewEncoder(response).Encode(\"${3/(.*)/${1:/capitalize}/} with id \" + id + \" deleted successfully !!!\")",
		  "}"
		],
		"description": "Couchbase Go delete Api"
	  },
	  "Couchbase Go Repository": {
		"prefix": "gocbrepo",
		"body": [
		  "package repository",
		  "import (",
		  "	\"fmt\"",
		  "	\"utils\"",
		  ")",
		  "type ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} struct {",
		  "	Id     string  `json:id`",
		  "	// Add attributes ",
		  "}",
		  "",
		  "func Get${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}(id string) (${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}, error) {",
		  "	bucket := utils.Bucket()",
		  "	var ${TM_FILENAME_BASE/(.*)/${1:/downcase}/} ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}",
		  "	_, err := bucket.Get(id, &${TM_FILENAME_BASE/(.*)/${1:/downcase}/})",
		  "	if err != nil {",
		  "		fmt.Println(err.Error())",
		  "		return ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, err",
		  "	}",
		  "	return ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, err",
		  "",
		  "}",
		  "func Add${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}(${TM_FILENAME_BASE/(.*)/${1:/downcase}/} ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}) (${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}, error) {",
		  "",
		  "	bucket := utils.Bucket()",
		  "	_, err := bucket.Insert(${TM_FILENAME_BASE/(.*)/${1:/downcase}/}.Id, &${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, 0)",
		  "	if err != nil {",
		  "		fmt.Println(err.Error())",
		  "		return ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, err",
		  "	}",
		  "	return ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, err",
		  "",
		  "}",
		  "func Modify${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}(${TM_FILENAME_BASE/(.*)/${1:/downcase}/} ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}) (${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}, error) {",
		  "",
		  "	bucket := utils.Bucket()",
		  "	_, err := bucket.Upsert(${TM_FILENAME_BASE/(.*)/${1:/downcase}/}.Id, &${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, 0)",
		  "	if err != nil {",
		  "		fmt.Println(err.Error())",
		  "		return ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, err",
		  "    }",
		  "	return ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}, err",
		  "",
		  "}",
		  "func Remove${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}(id string) (error) {",
		  "",
		  "	bucket := utils.Bucket()",
		  "	_, err := bucket.Remove(id, 0)",
		  "	if err != nil {",
		  "		fmt.Println(err.Error())",
		  "		return err",
		  "	}",
		  "	return err",
		  "}",
		  ""
		],
		"description": "Couchbase Go Repository"
	  },
	  "Couchbase Go Get Api": {
		"prefix": "gocbgetapi",
		"body": [
		  "// Get${3/(.*)/${1:/capitalize}/} godoc",
		  "// @Summary Get ${3/(.*)/${1:/capitalize}/}",
		  "// @Description Get ${3/(.*)/${1:/capitalize}/} by ${3/(.*)/${1:/capitalize}/} Id",
		  "// @Tags ${3/(.*)/${1:/downcase}/}",
		  "// @Param  id path string true \"${3/(.*)/${1:/capitalize}/} Id\"",
		  "// @Produce  json",
		  "// @Success 200",
		  "// @Router /api/get${3/(.*)/${1:/downcase}/}/{id} [get]",
		  "func Get${3/(.*)/${1:/capitalize}/}(response http.ResponseWriter, request *http.Request) {",
		  "",
		  "	response.Header().Set(\"content-type\", \"application/json\")",
		  "	params := mux.Vars(request)",
		  "	id := params[\"id\"]",
		  "	${3/(.*)/${1:/downcase}/}, err := repository.Get${3/(.*)/${1:/capitalize}/}(id)",
		  "	if err != nil {",
		  "		response.WriteHeader(http.StatusInternalServerError)",
		  "		response.Write([]byte(`{ \"message\": \"` + err.Error() + `\" }`))",
		  "		return",
		  "	}",
		  "	json.NewEncoder(response).Encode(${3/(.*)/${1:/downcase}/})",
		  "}"
		],
		"description": "Couchbase Go Get Api"
	  }
}